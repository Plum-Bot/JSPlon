program        → declaration* EOF ;

declaration    → classDecl
               | funDecl
               | varDecl
               | statement ;

classDecl      → "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" function* "}" ;
funDecl        → "function" function ;
varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

statement      → exprStmt
               | forStmt
               | ifStmt
               | printStmt
               | returnStmt
               | whileStmt
               | repeatStmt
               | breakStmt
               | continueStmt
               | block ;

exprStmt       → expression ";" ;
forStmt        → "for" "(" ( varDecl | exprStmt | ";" )
                           expression? ";"
                           expression? ")" statement ;
ifStmt         → "if" "(" expression ")" statement ( "else" "if" "(" expression ")" statement )* ( "else" statement )? ;
printStmt      → "print" "(" expression ")" ";" ;
repeatStmt     → "repeat" "(" expression ( "," expression )? ")" statement ;
returnStmt     → "return" expression? ";" ;
whileStmt      → "while" "(" expression ")" statement ;
repeatStmt     → "repeat" "(" expression ")" statement ;
# breakStmt      → "break" ";" ;
# continueStmt   → "continue" ";" ;
block          → "{" declaration* "}" ;

# Even though expression = ternary, it produces a cascade that results in precedence.
expression     → assignment ;

assignment     → ( call "." )? IDENTIFIER "=" assignment
               | ternary;

ternary        → logic_or "?" logic_or ":" logic_or ;
logic_or       → logic_and ( "||" logic_and )* ;
logic_and      → logic_xor ( "&&" logic_xor )* ;
logic_xor      → equality ( "^^" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → bitwiseShift ( ( ">" | ">=" | "<" | "<=" ) bitwiseShift )* ;
bitwiseBool    → bitwiseShift ( ( "&" | "|" | "^" ) bitwiseShift )* ;
bitwiseShift   → addition ( ( "<<" | ">>" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → power ( ( "/" | "*" ) power )* ;
power          → unary ( "**"  unary )* ;

unary          → ( "!" | "-" ) unary | postfix ;
postfix        → call ( "++" | "--" );
call           → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        → "true" | "false" | "null" | "this"
               | NUMBER | STRING | IDENTIFIER | "(" expression ")"
               | "super" "." IDENTIFIER | ARRAY ;

function       → IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
arguments      → expression ( "," expression )* ;

NUMBER         → DIGIT+ ( ( "." | "," ) DIGIT+ )? ;
STRING         → "\"" <any char except '"'>* "\"" 
                 | "'" <any char except "'" and "\n">* "'";
IDENTIFIER     → ALPHA ( ALPHA | DIGIT )* ;
ALPHA          → "a" ... "z" | "A" ... "Z" | "_" | "$" | "€" ;
DIGIT          → "0" ... "9" ;
ARRAY          → "[" ( expression )* "]";