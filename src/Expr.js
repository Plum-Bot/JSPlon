// DO NOT EDIT THIS FILE DIRECTLY! It is generated by generateAst.js 


class Expr {
    accept(visitor) {}

    toString() {
        return "AST Node Superclass: Expr"
    }
}

class Assign extends Expr {
    name;
    value;

    constructor(name, value) {
        super()
        this.name = name;
        this.value = value;
    }

    accept(visitor) {
        return visitor.visitAssignExpr(this);
    }

    toString() {
        return "AST Node: Expr Assign";
    }
}

class Binary extends Expr {
    left;
    operator;
    right;

    constructor(left, operator, right) {
        super()
        this.left = left;
        this.operator = operator;
        this.right = right;
    }

    accept(visitor) {
        return visitor.visitBinaryExpr(this);
    }

    toString() {
        return "AST Node: Expr Binary";
    }
}

class Call extends Expr {
    callee;
    paren;
    args;

    constructor(callee, paren, args) {
        super()
        this.callee = callee;
        this.paren = paren;
        this.args = args;
    }

    accept(visitor) {
        return visitor.visitCallExpr(this);
    }

    toString() {
        return "AST Node: Expr Call";
    }
}

class Get extends Expr {
    object;
    name;

    constructor(object, name) {
        super()
        this.object = object;
        this.name = name;
    }

    accept(visitor) {
        return visitor.visitGetExpr(this);
    }

    toString() {
        return "AST Node: Expr Get";
    }
}

class Grouping extends Expr {
    expression;

    constructor(expression) {
        super()
        this.expression = expression;
    }

    accept(visitor) {
        return visitor.visitGroupingExpr(this);
    }

    toString() {
        return "AST Node: Expr Grouping";
    }
}

class Literal extends Expr {
    value;

    constructor(value) {
        super()
        this.value = value;
    }

    accept(visitor) {
        return visitor.visitLiteralExpr(this);
    }

    toString() {
        return "AST Node: Expr Literal";
    }
}

class Logical extends Expr {
    left;
    operator;
    right;

    constructor(left, operator, right) {
        super()
        this.left = left;
        this.operator = operator;
        this.right = right;
    }

    accept(visitor) {
        return visitor.visitLogicalExpr(this);
    }

    toString() {
        return "AST Node: Expr Logical";
    }
}

class Postfix extends Expr {
    left;
    operator;

    constructor(left, operator) {
        super()
        this.left = left;
        this.operator = operator;
    }

    accept(visitor) {
        return visitor.visitPostfixExpr(this);
    }

    toString() {
        return "AST Node: Expr Postfix";
    }
}

class Set extends Expr {
    object;
    name;
    value;

    constructor(object, name, value) {
        super()
        this.object = object;
        this.name = name;
        this.value = value;
    }

    accept(visitor) {
        return visitor.visitSetExpr(this);
    }

    toString() {
        return "AST Node: Expr Set";
    }
}

class SubscriptGet extends Expr {
    object;
    name;
    bracket;

    constructor(object, name, bracket) {
        super()
        this.object = object;
        this.name = name;
        this.bracket = bracket;
    }

    accept(visitor) {
        return visitor.visitSubscriptGetExpr(this);
    }

    toString() {
        return "AST Node: Expr SubscriptGet";
    }
}

class Ternary extends Expr {
    left;
    leftOperator;
    center;
    rightOperator;
    right;

    constructor(left, leftOperator, center, rightOperator, right) {
        super()
        this.left = left;
        this.leftOperator = leftOperator;
        this.center = center;
        this.rightOperator = rightOperator;
        this.right = right;
    }

    accept(visitor) {
        return visitor.visitTernaryExpr(this);
    }

    toString() {
        return "AST Node: Expr Ternary";
    }
}

class This extends Expr {
    keyword;

    constructor(keyword) {
        super()
        this.keyword = keyword;
    }

    accept(visitor) {
        return visitor.visitThisExpr(this);
    }

    toString() {
        return "AST Node: Expr This";
    }
}

class Unary extends Expr {
    operator;
    right;

    constructor(operator, right) {
        super()
        this.operator = operator;
        this.right = right;
    }

    accept(visitor) {
        return visitor.visitUnaryExpr(this);
    }

    toString() {
        return "AST Node: Expr Unary";
    }
}

class Variable extends Expr {
    name;

    constructor(name) {
        super()
        this.name = name;
    }

    accept(visitor) {
        return visitor.visitVariableExpr(this);
    }

    toString() {
        return "AST Node: Expr Variable";
    }
}

module.exports = {
    Expr,
    Assign,
    Binary,
    Call,
    Get,
    Grouping,
    Literal,
    Logical,
    Postfix,
    Set,
    SubscriptGet,
    Ternary,
    This,
    Unary,
    Variable
}
